{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PHT\\\\OneDrive\\\\laptrinhungdungnangcao\\\\gk\\\\frontend_shop-web-master\\\\frontend_shop-web-master\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport function useAuth() {\n  _s();\n  return useContext(AuthContext);\n}\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [authError, setAuthError] = useState(null);\n\n  // Load user data from localStorage on initial render\n  useEffect(() => {\n    // Kiểm tra xem có JWT trong localStorage không\n    const storedJwt = localStorage.getItem('jwt');\n    const storedRole = localStorage.getItem('role');\n    if (storedJwt && storedRole) {\n      // Nếu có, tạo đối tượng user và cập nhật state\n      const email = localStorage.getItem('email') || 'user@example.com';\n      const user = {\n        email,\n        role: storedRole,\n        jwt: storedJwt\n      };\n      setCurrentUser(user);\n\n      // Lưu vào format mới để thống nhất\n      localStorage.setItem('user', JSON.stringify(user));\n    }\n  }, []);\n\n  // Send OTP to email\n  const sendOTP = async email => {\n    setAuthError(null);\n    try {\n      // In a real app, you would call your API endpoint here\n      // For now, we'll simulate the API response\n      console.log(`Sending OTP to ${email}`);\n\n      // Mock API call successful\n      return {\n        success: true,\n        message: 'OTP sent successfully'\n      };\n    } catch (error) {\n      setAuthError('Không thể gửi mã OTP. Vui lòng thử lại sau.');\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  };\n\n  // Verify OTP\n  const verifyOTP = async (email, otp) => {\n    setAuthError(null);\n    try {\n      // In a real app, this would verify with your backend\n      // For this demo, we'll simulate a successful verification\n      console.log(`Verifying OTP ${otp} for ${email}`);\n\n      // Mock successful verification (in production, verify with your API)\n      const userData = {\n        email,\n        name: email.split('@')[0],\n        phone: '0912345678',\n        gender: 'Nam',\n        birthday: '1990-01-01',\n        isAuthenticated: true\n      };\n\n      // Save to localStorage\n      localStorage.setItem('user', JSON.stringify(userData));\n      setCurrentUser(userData);\n      return {\n        success: true\n      };\n    } catch (error) {\n      setAuthError('Mã OTP không hợp lệ hoặc đã hết hạn.');\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  };\n\n  // Update user profile\n  const updateProfile = async profileData => {\n    setAuthError(null);\n    try {\n      // In a real app, this would update the profile in the backend\n      // For this demo, we'll just update the local state\n      const updatedUser = {\n        ...currentUser,\n        ...profileData\n      };\n\n      // Save to localStorage\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n      setCurrentUser(updatedUser);\n      return {\n        success: true\n      };\n    } catch (error) {\n      setAuthError('Không thể cập nhật thông tin. Vui lòng thử lại sau.');\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  };\n\n  // Logout\n  const logout = () => {\n    localStorage.removeItem('user');\n    localStorage.removeItem('jwt');\n    localStorage.removeItem('role');\n    localStorage.removeItem('email');\n    setCurrentUser(null);\n  };\n  const login = async (email, otp) => {\n    try {\n      const response = await axios.post('http://localhost:8080/auth/signing', {\n        email,\n        otp\n      });\n      if (response.data.message === 'Login success') {\n        const user = {\n          email,\n          role: response.data.role,\n          jwt: response.data.jwt\n        };\n\n        // Lưu thông tin người dùng vào localStorage\n        localStorage.setItem('user', JSON.stringify(user));\n\n        // Cập nhật trạng thái người dùng\n        setCurrentUser(user);\n        return {\n          success: true\n        };\n      } else {\n        return {\n          success: false,\n          message: response.data.message || 'Mã OTP không hợp lệ'\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Đã xảy ra lỗi, vui lòng thử lại sau'\n      };\n    }\n  };\n  // Register new user\n  const register = async userData => {\n    setAuthError(null);\n    try {\n      // In a real app, this would register the user with your backend\n      // For this demo, we'll simulate a successful registration\n      console.log('Registering new user:', userData);\n\n      // Check if email already exists (mock validation)\n      const existingUser = localStorage.getItem('user');\n      if (existingUser && JSON.parse(existingUser).email === userData.email) {\n        setAuthError('Email đã được sử dụng, vui lòng chọn email khác');\n        return {\n          success: false,\n          message: 'Email đã được sử dụng'\n        };\n      }\n\n      // In a real app, you would store the hashed password in the database\n      // For this demo, we'll create a user object without storing the raw password\n      const newUser = {\n        email: userData.email,\n        name: userData.fullname,\n        phone: userData.mobile,\n        gender: '',\n        birthday: '',\n        isAuthenticated: true,\n        createdAt: new Date().toISOString()\n      };\n\n      // Save to localStorage - in a real app, this would be handled by the backend\n      localStorage.setItem('user', JSON.stringify(newUser));\n      setCurrentUser(newUser);\n      return {\n        success: true\n      };\n    } catch (error) {\n      setAuthError('Không thể đăng ký tài khoản. Vui lòng thử lại sau.');\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  };\n  const value = {\n    currentUser,\n    loading,\n    authError,\n    sendOTP,\n    verifyOTP,\n    updateProfile,\n    register,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"UnecE+aLfCz4x7NYmNeklthKfGc=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","authError","setAuthError","storedJwt","localStorage","getItem","storedRole","email","user","role","jwt","setItem","JSON","stringify","sendOTP","console","log","success","message","error","verifyOTP","otp","userData","name","split","phone","gender","birthday","isAuthenticated","updateProfile","profileData","updatedUser","logout","removeItem","login","response","post","data","register","existingUser","parse","newUser","fullname","mobile","createdAt","Date","toISOString","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/PHT/OneDrive/laptrinhungdungnangcao/gk/frontend_shop-web-master/frontend_shop-web-master/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\nconst AuthContext = createContext();\n\nexport function useAuth() {\n  return useContext(AuthContext);\n}\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [authError, setAuthError] = useState(null);\n  \n  // Load user data from localStorage on initial render\n  useEffect(() => {\n    // Kiểm tra xem có JWT trong localStorage không\n    const storedJwt = localStorage.getItem('jwt');\n    const storedRole = localStorage.getItem('role');\n    \n    if (storedJwt && storedRole) {\n      // Nếu có, tạo đối tượng user và cập nhật state\n      const email = localStorage.getItem('email') || 'user@example.com';\n      const user = {\n        email,\n        role: storedRole,\n        jwt: storedJwt\n      };\n      \n      setCurrentUser(user);\n      \n      // Lưu vào format mới để thống nhất\n      localStorage.setItem('user', JSON.stringify(user));\n    }\n  }, []);\n\n  // Send OTP to email\n  const sendOTP = async (email) => {\n    setAuthError(null);\n    try {\n      // In a real app, you would call your API endpoint here\n      // For now, we'll simulate the API response\n      console.log(`Sending OTP to ${email}`);\n      \n      // Mock API call successful\n      return { success: true, message: 'OTP sent successfully' };\n      \n    } catch (error) {\n      setAuthError('Không thể gửi mã OTP. Vui lòng thử lại sau.');\n      return { success: false, message: error.message };\n    }\n  };\n\n  // Verify OTP\n  const verifyOTP = async (email, otp) => {\n    setAuthError(null);\n    try {\n      // In a real app, this would verify with your backend\n      // For this demo, we'll simulate a successful verification\n      console.log(`Verifying OTP ${otp} for ${email}`);\n      \n      // Mock successful verification (in production, verify with your API)\n      const userData = {\n        email,\n        name: email.split('@')[0],\n        phone: '0912345678',\n        gender: 'Nam',\n        birthday: '1990-01-01',\n        isAuthenticated: true,\n      };\n      \n      // Save to localStorage\n      localStorage.setItem('user', JSON.stringify(userData));\n      setCurrentUser(userData);\n      \n      return { success: true };\n      \n    } catch (error) {\n      setAuthError('Mã OTP không hợp lệ hoặc đã hết hạn.');\n      return { success: false, message: error.message };\n    }\n  };\n\n  // Update user profile\n  const updateProfile = async (profileData) => {\n    setAuthError(null);\n    try {\n      // In a real app, this would update the profile in the backend\n      // For this demo, we'll just update the local state\n      const updatedUser = {\n        ...currentUser,\n        ...profileData\n      };\n      \n      // Save to localStorage\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n      setCurrentUser(updatedUser);\n      \n      return { success: true };\n      \n    } catch (error) {\n      setAuthError('Không thể cập nhật thông tin. Vui lòng thử lại sau.');\n      return { success: false, message: error.message };\n    }\n  };\n\n  // Logout\n  const logout = () => {\n    localStorage.removeItem('user');\n    localStorage.removeItem('jwt');\n    localStorage.removeItem('role');\n    localStorage.removeItem('email');\n    setCurrentUser(null);\n  };\n  const login = async (email, otp) => {\n    try {\n      const response = await axios.post('http://localhost:8080/auth/signing', { email, otp });\n  \n      if (response.data.message === 'Login success') {\n        const user = {\n          email,\n          role: response.data.role,\n          jwt: response.data.jwt,\n        };\n  \n        // Lưu thông tin người dùng vào localStorage\n        localStorage.setItem('user', JSON.stringify(user));\n  \n        // Cập nhật trạng thái người dùng\n        setCurrentUser(user);\n  \n        return { success: true };\n      } else {\n        return { success: false, message: response.data.message || 'Mã OTP không hợp lệ' };\n      }\n    } catch (error) {\n      return { success: false, message: 'Đã xảy ra lỗi, vui lòng thử lại sau' };\n    }\n  };\n  // Register new user\n  const register = async (userData) => {\n    setAuthError(null);\n    try {\n      // In a real app, this would register the user with your backend\n      // For this demo, we'll simulate a successful registration\n      console.log('Registering new user:', userData);\n      \n      // Check if email already exists (mock validation)\n      const existingUser = localStorage.getItem('user');\n      if (existingUser && JSON.parse(existingUser).email === userData.email) {\n        setAuthError('Email đã được sử dụng, vui lòng chọn email khác');\n        return { success: false, message: 'Email đã được sử dụng' };\n      }\n      \n      // In a real app, you would store the hashed password in the database\n      // For this demo, we'll create a user object without storing the raw password\n      const newUser = {\n        email: userData.email,\n        name: userData.fullname,\n        phone: userData.mobile,\n        gender: '',\n        birthday: '',\n        isAuthenticated: true,\n        createdAt: new Date().toISOString()\n      };\n      \n      // Save to localStorage - in a real app, this would be handled by the backend\n      localStorage.setItem('user', JSON.stringify(newUser));\n      setCurrentUser(newUser);\n      \n      return { success: true };\n      \n    } catch (error) {\n      setAuthError('Không thể đăng ký tài khoản. Vui lòng thử lại sau.');\n      return { success: false, message: error.message };\n    }\n  };\n  const value = {\n    currentUser,\n    loading,\n    authError,\n    sendOTP,\n    verifyOTP,\n    updateProfile,\n    register,\n    logout\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}